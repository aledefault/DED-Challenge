@using DED.Web.Models
@using System.Net.Http.Headers
@using System.Text
@inject IHttpClientFactory ClientFactory

<EditForm Model="@DeviceFormModel" OnSubmit="SubmitForm" class="bg-light py-3 px-4 rounded">
    <div class="form-row">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <ul class="validation-errors">
                <li class="validation-message">
                    @_errorMessage
                </li>
            </ul>
        }
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label for="serialNumber">Serial Number</label>
            <InputText id="serialNumber" @bind-Value="DeviceFormModel.SerialNumber" class="form-control"></InputText>
        </div>
        <div class="form-group col">
            <label for="brand">Brand</label>
            <InputText id="brand" @bind-Value="DeviceFormModel.Brand" class="form-control"></InputText>
        </div>
        <div class="form-group col">
            <label for="model">Model</label>
            <InputText id="model" @bind-Value="DeviceFormModel.Model" class="form-control"></InputText>
        </div>
    </div>
    <div class="form-row">
        @if (DeviceToAdd == Device.Gateway)
        {
            <div class="form-group col-3">
                <label for="ip">Ip</label>
                <InputText id="ip" @bind-Value="DeviceFormModel.Ip" class="form-control"></InputText>
            </div>
            <div class="form-group col-3">
                <label for="port">Port</label>
                <InputNumber id="port" @bind-Value="DeviceFormModel.Port" class="form-control"></InputNumber>
            </div>
        }
    </div>
    <div class="form-row justify-content-end">
        <div class="form-group">
            <button type="button" class="btn btn-secondary" @onclick="async () => await OnHide.InvokeAsync()">Cancel</button>
            <button type="submit" class="btn btn-primary">Add</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public DeviceModel DeviceFormModel { get; set; }

    [Parameter]
    public Device DeviceToAdd { get; set; }

    [Parameter]
    public EventCallback OnHide { get; set; }

    [Parameter]
    public EventCallback OnSuccess { get; set; }


    public enum Device { EnergyMeter, Gateway, WaterMeter }

    private string _errorMessage = "";

    private async Task SubmitForm()
    {
        HttpResponseMessage response = null;
        switch (DeviceToAdd)
        {
            case Device.EnergyMeter:
                response = await ClientFactory.CreateClient("api").PostAsync("energymeter", GetContentForm());
                break;

            case Device.Gateway:
                response = await ClientFactory.CreateClient("api").PostAsync("gateway", GetContentForm());
                break;

            case Device.WaterMeter:
                response = await ClientFactory.CreateClient("api").PostAsync("watermeter", GetContentForm());
                break;

            default:
                return;
        }

        if (response == null || !response.IsSuccessStatusCode)
        {
            _errorMessage = (response?.StatusCode ?? System.Net.HttpStatusCode.InternalServerError) == System.Net.HttpStatusCode.Conflict
            ? "Device already exist."
            : "There was an error adding this device. Please, try again.";
            return;
        }
        else
        {
            _errorMessage = "";
        }

        await OnSuccess.InvokeAsync();

        HttpContent GetContentForm()
        {
            HttpContent httpContent = new StringContent(System.Text.Json.JsonSerializer.Serialize(DeviceFormModel), Encoding.UTF8);
            httpContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            return httpContent;
        }
    }
}
