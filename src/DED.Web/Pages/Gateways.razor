@page "/gateways"
@using DED.Web.Services
@using DED.Web.Models
@using System.Net.Http.Json
@using DED.Web.Shared
@using System.Timers
@implements IDisposable
@inject IHttpClientFactory ClientFactory
@inject DeviceCreatedEventService deviceCreatedService

<h1>Gateways</h1>

@if (_showForm)
{
    <DeviceForm DeviceToAdd="DeviceForm.Device.Gateway" DeviceFormModel="_deviceModelForm" OnHide="() => { _showForm = false; StateHasChanged(); }" OnSuccess="FormSubmited" />
}
else
{
    <div class="d-flex justify-content-end">
        <button type="button" class="btn btn-primary" @onclick="() => { _showForm = true; StateHasChanged(); }">Add</button>
    </div>
}
<div class="d-flex mt-3">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Serial Number</th>
                <th scope="col">Brand</th>
                <th scope="col">Model</th>
                <th scope="col">Ip</th>
                <th scope="col">Port</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var gatewway in _gateways)
            {
                <tr>
                    <td scope="row">@gatewway.Id</td>
                    <td @key="@gatewway.SerialNumber">@gatewway.SerialNumber</td>
                    <td>@gatewway.Brand</td>
                    <td>@gatewway.Model</td>
                    <td>@gatewway.Ip</td>
                    <td>@gatewway.Port</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    private List<DeviceModel> _gateways = new();
    private bool _showForm = false;
    private DeviceModel _deviceModelForm = new DeviceModel();

    protected override async Task OnInitializedAsync()
    {
        _gateways = await ClientFactory.CreateClient("api").GetFromJsonAsync<List<DeviceModel>>("gateway");
        deviceCreatedService.DeviceCreatedRecieved += GetData;
    }

    private void GetData(object sender, DeviceCreatedEventArgs e)
    {
        if (e.Device.GetType() != typeof(DED.Domain.Gateway))
            return;

        InvokeAsync(async () =>
        {
            var result = await ClientFactory.CreateClient("api").GetFromJsonAsync<DeviceModel>($"gateway\\{e.Device.Id}");
            var index = _gateways.FindIndex(d => d.SerialNumber == e.Device.SerialNumber);
            _gateways[index] = result;
            StateHasChanged();
        });
    }

    private void FormSubmited()
    {
        _gateways.Add(_deviceModelForm);
        StateHasChanged();
    }

    public void Dispose() => deviceCreatedService.DeviceCreatedRecieved -= GetData;
}
